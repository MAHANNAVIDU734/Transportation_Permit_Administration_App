{"ast":null,"code":"var _jsxFileName = \"/Volumes/MAHAN/ww/vuexy-admin/react-version/Bootstrap5/starter-kit/src/router/Router.js\",\n    _s = $RefreshSig$();\n\n// ** React Imports\nimport { Suspense, lazy, Fragment } from 'react'; // ** Utils\n\nimport { useLayout } from '@hooks/useLayout';\nimport { useRouterTransition } from '@hooks/useRouterTransition'; // ** Custom Components\n\nimport LayoutWrapper from '@layouts/components/layout-wrapper'; // ** Router Components\n\nimport { BrowserRouter as AppRouter, Route, Switch, Redirect } from 'react-router-dom'; // ** Routes & Default Routes\n\nimport { DefaultRoute, Routes } from './routes'; // ** Layouts\n\nimport BlankLayout from '@layouts/BlankLayout';\nimport VerticalLayout from '@src/layouts/VerticalLayout';\nimport HorizontalLayout from '@src/layouts/HorizontalLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Router = () => {\n  _s();\n\n  // ** Hooks\n  const {\n    layout,\n    setLayout,\n    setLastLayout\n  } = useLayout();\n  const {\n    transition,\n    setTransition\n  } = useRouterTransition(); // ** Default Layout\n\n  const DefaultLayout = layout === 'horizontal' ? 'HorizontalLayout' : 'VerticalLayout'; // ** All of the available layouts\n\n  const Layouts = {\n    BlankLayout,\n    VerticalLayout,\n    HorizontalLayout\n  }; // ** Current Active Item\n\n  const currentActiveItem = null; // ** Return Filtered Array of Routes & Paths\n\n  const LayoutRoutesAndPaths = layout => {\n    const LayoutRoutes = [];\n    const LayoutPaths = [];\n\n    if (Routes) {\n      Routes.filter(route => {\n        // ** Checks if Route layout or Default layout matches current layout\n        if (route.layout === layout || route.layout === undefined && DefaultLayout === layout) {\n          LayoutRoutes.push(route);\n          LayoutPaths.push(route.path);\n        }\n      });\n    }\n\n    return {\n      LayoutRoutes,\n      LayoutPaths\n    };\n  };\n\n  const NotAuthorized = /*#__PURE__*/lazy(() => import('@src/views/NotAuthorized')); // ** Init Error Component\n\n  const Error = /*#__PURE__*/lazy(() => import('@src/views/Error'));\n  /**\n   ** Final Route Component Checks for Login & User Role and then redirects to the route\n   */\n  // const FinalRoute = props => {\n  //   const route = props.route\n  //   let action, resource\n  //   // ** Assign vars based on route meta\n  //   if (route.meta) {\n  //     action = route.meta.action ? route.meta.action : null\n  //     resource = route.meta.resource ? route.meta.resource : null\n  //   }\n  //   if (\n  //     (!isUserLoggedIn() && route.meta === undefined) ||\n  //     (!isUserLoggedIn() && route.meta && !route.meta.authRoute && !route.meta.publicRoute)\n  //   ) {\n  //     /**\n  //      ** If user is not Logged in & route meta is undefined\n  //      ** OR\n  //      ** If user is not Logged in & route.meta.authRoute, !route.meta.publicRoute are undefined\n  //      ** Then redirect user to login\n  //      */\n  //     return <Redirect to='/login' />\n  //   } else if (route.meta && route.meta.authRoute && isUserLoggedIn()) {\n  //     // ** If route has meta and authRole and user is Logged in then redirect user to home page (DefaultRoute)\n  //     return <Redirect to='/' />\n  //   } else if (isUserLoggedIn() && !ability.can(action || 'read', resource)) {\n  //     // ** If user is Logged in and doesn't have ability to visit the page redirect the user to Not Authorized\n  //     return <Redirect to='/misc/not-authorized' />\n  //   } else {\n  //     // ** If none of the above render component\n  //     return <route.component {...props} />\n  //   }\n  // }\n  // ** Return Route to Render\n\n  const ResolveRoutes = () => {\n    return Object.keys(Layouts).map((layout, index) => {\n      // ** Convert Layout parameter to Layout Component\n      // ? Note: make sure to keep layout and component name equal\n      const LayoutTag = Layouts[layout]; // ** Get Routes and Paths of the Layout\n\n      const {\n        LayoutRoutes,\n        LayoutPaths\n      } = LayoutRoutesAndPaths(layout); // ** We have freedom to display different layout for different route\n      // ** We have made LayoutTag dynamic based on layout, we can also replace it with the only layout component,\n      // ** that we want to implement like VerticalLayout or HorizontalLayout\n      // ** We segregated all the routes based on the layouts and Resolved all those routes inside layouts\n      // ** RouterProps to pass them to Layouts\n\n      const routerProps = {};\n      return /*#__PURE__*/_jsxDEV(Route, {\n        path: LayoutPaths,\n        children: /*#__PURE__*/_jsxDEV(LayoutTag, {\n          layout: layout,\n          setLayout: setLayout,\n          transition: transition,\n          routerProps: routerProps,\n          setLastLayout: setLastLayout,\n          setTransition: setTransition,\n          currentActiveItem: currentActiveItem,\n          children: /*#__PURE__*/_jsxDEV(Switch, {\n            children: LayoutRoutes.map(route => {\n              return /*#__PURE__*/_jsxDEV(Route, {\n                path: route.path,\n                exact: route.exact === true,\n                render: props => {\n                  // ** Assign props to routerProps\n                  Object.assign(routerProps, { ...props,\n                    meta: route.meta\n                  });\n                  return /*#__PURE__*/_jsxDEV(Fragment, {\n                    children: route.layout === 'BlankLayout' ? /*#__PURE__*/_jsxDEV(Fragment, {\n                      children: /*#__PURE__*/_jsxDEV(route.component, { ...props\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 146,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 145,\n                      columnNumber: 29\n                    }, this) : /*#__PURE__*/_jsxDEV(LayoutWrapper, {\n                      layout: DefaultLayout,\n                      transition: transition,\n                      setTransition: setTransition\n                      /* Conditional props */\n\n                      /*eslint-disable */\n                      ,\n                      ...(route.appLayout ? {\n                        appLayout: route.appLayout\n                      } : {}),\n                      ...(route.meta ? {\n                        routeMeta: route.meta\n                      } : {}),\n                      ...(route.className ? {\n                        wrapperClass: route.className\n                      } : {}),\n                      children: /*#__PURE__*/_jsxDEV(Suspense, {\n                        fallback: null,\n                        children: /*#__PURE__*/_jsxDEV(route.component, { ...props\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 173,\n                          columnNumber: 33\n                        }, this)\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 172,\n                        columnNumber: 31\n                      }, this)\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 149,\n                      columnNumber: 29\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 141,\n                    columnNumber: 25\n                  }, this);\n                }\n              }, route.path, false, {\n                fileName: _jsxFileName,\n                lineNumber: 129,\n                columnNumber: 19\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 11\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppRouter, {\n    basename: process.env.REACT_APP_BASENAME,\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        render: () => {\n          return /*#__PURE__*/_jsxDEV(Redirect, {\n            to: DefaultRoute\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 20\n          }, this);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/misc/not-authorized\",\n        render: () => /*#__PURE__*/_jsxDEV(Layouts.BlankLayout, {\n          children: /*#__PURE__*/_jsxDEV(NotAuthorized, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 9\n      }, this), ResolveRoutes(), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"*\",\n        component: Error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Router, \"J/PrNHhIfXgUcQBKZd32hyWvsHY=\", false, function () {\n  return [useLayout, useRouterTransition];\n});\n\n_c = Router;\nexport default Router;\n\nvar _c;\n\n$RefreshReg$(_c, \"Router\");","map":{"version":3,"names":["Suspense","lazy","Fragment","useLayout","useRouterTransition","LayoutWrapper","BrowserRouter","AppRouter","Route","Switch","Redirect","DefaultRoute","Routes","BlankLayout","VerticalLayout","HorizontalLayout","Router","layout","setLayout","setLastLayout","transition","setTransition","DefaultLayout","Layouts","currentActiveItem","LayoutRoutesAndPaths","LayoutRoutes","LayoutPaths","filter","route","undefined","push","path","NotAuthorized","Error","ResolveRoutes","Object","keys","map","index","LayoutTag","routerProps","exact","props","assign","meta","appLayout","routeMeta","className","wrapperClass","process","env","REACT_APP_BASENAME"],"sources":["/Volumes/MAHAN/ww/vuexy-admin/react-version/Bootstrap5/starter-kit/src/router/Router.js"],"sourcesContent":["// ** React Imports\nimport { Suspense, lazy, Fragment } from 'react'\n\n// ** Utils\nimport { useLayout } from '@hooks/useLayout'\nimport { useRouterTransition } from '@hooks/useRouterTransition'\n\n// ** Custom Components\nimport LayoutWrapper from '@layouts/components/layout-wrapper'\n\n// ** Router Components\nimport { BrowserRouter as AppRouter, Route, Switch, Redirect } from 'react-router-dom'\n\n// ** Routes & Default Routes\nimport { DefaultRoute, Routes } from './routes'\n\n// ** Layouts\nimport BlankLayout from '@layouts/BlankLayout'\nimport VerticalLayout from '@src/layouts/VerticalLayout'\nimport HorizontalLayout from '@src/layouts/HorizontalLayout'\n\nconst Router = () => {\n  // ** Hooks\n  const { layout, setLayout, setLastLayout } = useLayout()\n  const { transition, setTransition } = useRouterTransition()\n\n  // ** Default Layout\n  const DefaultLayout = layout === 'horizontal' ? 'HorizontalLayout' : 'VerticalLayout'\n\n  // ** All of the available layouts\n  const Layouts = { BlankLayout, VerticalLayout, HorizontalLayout }\n\n  // ** Current Active Item\n  const currentActiveItem = null\n\n  // ** Return Filtered Array of Routes & Paths\n  const LayoutRoutesAndPaths = layout => {\n    const LayoutRoutes = []\n    const LayoutPaths = []\n\n    if (Routes) {\n      Routes.filter(route => {\n        // ** Checks if Route layout or Default layout matches current layout\n        if (route.layout === layout || (route.layout === undefined && DefaultLayout === layout)) {\n          LayoutRoutes.push(route)\n          LayoutPaths.push(route.path)\n        }\n      })\n    }\n\n    return { LayoutRoutes, LayoutPaths }\n  }\n\n  const NotAuthorized = lazy(() => import('@src/views/NotAuthorized'))\n\n  // ** Init Error Component\n  const Error = lazy(() => import('@src/views/Error'))\n\n  /**\n   ** Final Route Component Checks for Login & User Role and then redirects to the route\n   */\n  // const FinalRoute = props => {\n  //   const route = props.route\n  //   let action, resource\n\n  //   // ** Assign vars based on route meta\n  //   if (route.meta) {\n  //     action = route.meta.action ? route.meta.action : null\n  //     resource = route.meta.resource ? route.meta.resource : null\n  //   }\n\n  //   if (\n  //     (!isUserLoggedIn() && route.meta === undefined) ||\n  //     (!isUserLoggedIn() && route.meta && !route.meta.authRoute && !route.meta.publicRoute)\n  //   ) {\n  //     /**\n  //      ** If user is not Logged in & route meta is undefined\n  //      ** OR\n  //      ** If user is not Logged in & route.meta.authRoute, !route.meta.publicRoute are undefined\n  //      ** Then redirect user to login\n  //      */\n\n  //     return <Redirect to='/login' />\n  //   } else if (route.meta && route.meta.authRoute && isUserLoggedIn()) {\n  //     // ** If route has meta and authRole and user is Logged in then redirect user to home page (DefaultRoute)\n  //     return <Redirect to='/' />\n  //   } else if (isUserLoggedIn() && !ability.can(action || 'read', resource)) {\n  //     // ** If user is Logged in and doesn't have ability to visit the page redirect the user to Not Authorized\n  //     return <Redirect to='/misc/not-authorized' />\n  //   } else {\n  //     // ** If none of the above render component\n  //     return <route.component {...props} />\n  //   }\n  // }\n\n  // ** Return Route to Render\n  const ResolveRoutes = () => {\n    return Object.keys(Layouts).map((layout, index) => {\n      // ** Convert Layout parameter to Layout Component\n      // ? Note: make sure to keep layout and component name equal\n\n      const LayoutTag = Layouts[layout]\n\n      // ** Get Routes and Paths of the Layout\n      const { LayoutRoutes, LayoutPaths } = LayoutRoutesAndPaths(layout)\n\n      // ** We have freedom to display different layout for different route\n      // ** We have made LayoutTag dynamic based on layout, we can also replace it with the only layout component,\n      // ** that we want to implement like VerticalLayout or HorizontalLayout\n      // ** We segregated all the routes based on the layouts and Resolved all those routes inside layouts\n\n      // ** RouterProps to pass them to Layouts\n      const routerProps = {}\n\n      return (\n        <Route path={LayoutPaths} key={index}>\n          <LayoutTag\n            layout={layout}\n            setLayout={setLayout}\n            transition={transition}\n            routerProps={routerProps}\n            setLastLayout={setLastLayout}\n            setTransition={setTransition}\n            currentActiveItem={currentActiveItem}\n          >\n            <Switch>\n              {LayoutRoutes.map(route => {\n                return (\n                  <Route\n                    key={route.path}\n                    path={route.path}\n                    exact={route.exact === true}\n                    render={props => {\n                      // ** Assign props to routerProps\n                      Object.assign(routerProps, {\n                        ...props,\n                        meta: route.meta\n                      })\n\n                      return (\n                        <Fragment>\n                          {/* Layout Wrapper to add classes based on route's layout, appLayout and className */}\n\n                          {route.layout === 'BlankLayout' ? (\n                            <Fragment>\n                              <route.component {...props} />\n                            </Fragment>\n                          ) : (\n                            <LayoutWrapper\n                              layout={DefaultLayout}\n                              transition={transition}\n                              setTransition={setTransition}\n                              /* Conditional props */\n                              /*eslint-disable */\n                              {...(route.appLayout\n                                ? {\n                                    appLayout: route.appLayout\n                                  }\n                                : {})}\n                              {...(route.meta\n                                ? {\n                                    routeMeta: route.meta\n                                  }\n                                : {})}\n                              {...(route.className\n                                ? {\n                                    wrapperClass: route.className\n                                  }\n                                : {})}\n                              /*eslint-enable */\n                            >\n                              <Suspense fallback={null}>\n                                <route.component {...props} />\n                              </Suspense>\n                            </LayoutWrapper>\n                          )}\n                        </Fragment>\n                      )\n                    }}\n                  />\n                )\n              })}\n            </Switch>\n          </LayoutTag>\n        </Route>\n      )\n    })\n  }\n\n  return (\n    <AppRouter basename={process.env.REACT_APP_BASENAME}>\n      <Switch>\n        {/* If user is logged in Redirect user to DefaultRoute else to login */}\n        <Route\n          exact\n          path='/'\n          render={() => {\n            return <Redirect to={DefaultRoute} />\n          }}\n        />\n        {/* Not Auth Route */}\n        <Route\n          exact\n          path='/misc/not-authorized'\n          render={() => (\n            <Layouts.BlankLayout>\n              <NotAuthorized />\n            </Layouts.BlankLayout>\n          )}\n        />\n        {ResolveRoutes()}\n\n        {/* NotFound Error page */}\n        <Route path='*' component={Error} />\n      </Switch>\n    </AppRouter>\n  )\n}\n\nexport default Router\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}